# see. http://qiita.com/okamos/items/2259d5c770d51b88d75b

[[plugins]]
repo = 'Shougo/denite.nvim'
on_event = 'BufRead'
hook_source = 'source ~/.config/nvim/plugins/denite.rc.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = 'denite.nvim'

[[plugins]]
repo = 'osyo-manga/vim-over'
on_event = 'OverCommandLine'
hook_add = 'source ~/.config/nvim/plugins/vim-over.rc.vim'

# ref. https://github.com/Shougo/shougo-s-github/blob/c487b30/vim/rc/ddc.toml
[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = 'InsertEnter'
hook_source = '''
  inoremap <silent><expr> <C-l> ddc#complete_common_string()
  call ddc#custom#patch_global(
      \ 'sources', has('nvim') ?
      \ ['around', 'deoppet', 'file', 'rg'] :
      \ ['around', 'file'],
      \ )
  call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'ignoreCase': v:true,
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank'],
      \   'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {
      \   'mark': 'A',
      \   'matchers': ['matcher_head', 'matcher_length'],
      \ },
      \ 'eskk': {'mark': 'eskk', 'matchers': [], 'sorters': []},
      \ 'necovim': {'mark': 'vim'},
      \ 'cmdline': {
      \   'mark': 'cmdline',
      \   'forceCompletionPattern': '\S/\S*',
      \ },
      \ 'deoppet': {'mark': 'dp', 'dup': v:true},
      \ 'nextword': {
      \   'mark': 'nextword',
      \   'minAutoCompleteLength': 3,
      \   'isVolatile': v:true,
      \ },
      \ 'nvim-lsp': {
      \   'mark': 'lsp',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
      \ },
      \ 'rtags': {
      \   'mark': 'R',
      \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
      \ },
      \ 'file': {
      \   'mark': 'F',
      \   'isVolatile': v:true,
      \   'minAutoCompleteLength': 1000,
      \   'forceCompletionPattern': '\S/\S*'
      \ },
      \ 'cmdline-history': {'mark': 'history'},
      \ 'shell-history': {'mark': 'shell'},
      \ 'zsh': {
      \   'mark': 'zsh',
      \   'isVolatile': v:true,
      \   'forceCompletionPattern': '\S/\S*'
      \ },
      \ 'rg': {
      \   'mark': 'rg',
      \   'matchers': ['matcher_head', 'matcher_length'],
      \   'minAutoCompleteLength': 4,
      \ },
      \ })
  call ddc#custom#patch_global('sourceOptions', {
      \ 'skkeleton': {
      \   'mark': 'skk',
      \   'matchers': ['skkeleton'],
      \   'sorters': [],
      \   'minAutoCompleteLength': 2,
      \ }})
  call ddc#custom#patch_filetype(
      \ ['help', 'markdown', 'gitcommit'], 'sources', has('nvim') ?
      \ ['deoppet', 'nextword', 'around'] :
      \ ['nextword', 'around']
      \ )
  if has('nvim')
    call ddc#custom#patch_filetype(
            \ ['typescript', 'go'], 'sources',
            \ ['nvim-lsp', 'deoppet', 'around']
            \ )
  endif
  call ddc#custom#patch_filetype(['deol'], {
      \ 'keywordPattern': '[0-9a-zA-Z_./-]',
      \ 'sources': ['zsh', 'shell-history', 'around'],
      \ })
  call ddc#custom#patch_filetype(['FineCmdlinePrompt'], {
      \ 'keywordPattern': '[0-9a-zA-Z_:#]*',
      \ 'sources': ['cmdline', 'cmdline-history', 'around'],
      \ 'specialBufferCompletion': v:true,
      \ })
  " Use pum.vim
  call ddc#custom#patch_global('autoCompleteEvents', [
      \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
      \ 'CmdlineEnter', 'CmdlineChanged',
      \ ])
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  inoremap <silent><expr> <TAB>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<TAB>' : ddc#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
  inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
  inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  inoremap <silent><expr> <C-l>   ddc#map#extend()
  call ddc#enable()
'''
hook_add = '''
  nnoremap :       <Cmd>call CommandlinePre(':')<CR>:
  nnoremap ?       <Cmd>call CommandlinePre('/')<CR>?
  function! CommandlinePre(mode) abort
    call dein#source('ddc.vim')
    " Note: It disables default command line completion!
    cnoremap <expr> <Tab>
    \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
    \ ddc#manual_complete()
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    set wildchar=<C-t>
    "set cmdheight=1
    " Overwrite sources
    let s:prev_buffer_config = ddc#custom#get_buffer()
    if a:mode ==# ':'
      call ddc#custom#patch_buffer('sources',
              \ ['cmdline', 'cmdline-history', 'around'])
      call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#]*')
    else
      call ddc#custom#patch_buffer('sources',
              \ ['around', 'line'])
    endif
    autocmd MyAutoCmd User DDCCmdlineLeave ++once call CommandlinePost()
    " Enable command line completion
    call ddc#enable_cmdline_completion()
    call ddc#enable()
  endfunction
  function! CommandlinePost() abort
    " Restore sources
    call ddc#custom#set_buffer(s:prev_buffer_config)
    silent! cunmap <Tab>
    set wildchar=<Tab>
    "try
    "  set cmdheight=0
    "catch
    "  set cmdheight=1
    "endtry
  endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nextword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-zsh'
on_source = 'ddc.vim'
depends = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
          \ ['vim'], 'sources', has('nvim') ?
          \ ['necovim', 'around', 'deoppet', 'file'] :
          \ ['necovim', 'around', 'file']
          \ )
'''

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-rg'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-line'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'impatient.nvim'
on_ft = ['typescript', 'go']
if = 'has("nvim")'
depends = 'ddc.vim'
hook_source = '''
  lua << EOF
require'lspconfig'.denols.setup{}
require'lspconfig'.gopls.setup{}
EOF
'''

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-omni'

[[plugins]]
repo = 'Shougo/ddc-rtags'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
    \ 'toml': ['^\s*#\s*'],
    \ }
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
